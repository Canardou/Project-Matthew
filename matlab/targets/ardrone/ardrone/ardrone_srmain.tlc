%% ==============================================================================
%% Copyright 1994-2012 The MathWorks, Inc.
%%
%selectfile NULL_FILE

%function FcnSingleTaskingMain() void
  
  %if GenerateSampleERTMain
    %assign ::CompiledModel.GenerateSampleERTMain = TLC_FALSE
    %warning Overriding example ert_main.c!
  %endif

  %openfile tmpBuf

  %<SLibDeclareFcnProtoCtlVariables()>\
  
  %<LibWriteModelData()>\
  %closefile tmpBuf
  
  %<SLibCacheCodeToFile("mainSrc_data_defn", tmpBuf)>
  
  %openfile tmpBuf
  #include "%<LibGetMdlPubHdrBaseName()>.h"
  #include <paparazzi/SysTime.h>    // Timers PAPARAZZI
  #include <paparazzi/Navdata.h>    // Données capteurs PAPARAZZI
  #include <paparazzi/Actuators.h>  // LEDS Moteurs PAPARAZZI
  #include <unistd.h>
  #include <iostream>
  #include <stdint.h>
  %closefile tmpBuf
 
  %<SLibCacheCodeToFile("mainSrc_incl", tmpBuf)>
  
  %openfile tmpBuf
  void __cxa_pure_virtual(void){}
  #define STEP_SIZE (%<CompiledModel.FundamentalStepSize>)

  %if CompiledModel.StopTime != rtInf
    #define STOP_TIME (%<CompiledModel.StopTime>)
  %endif

  #define ACTUATORS_PERIOD  (0.01)
  #define SENSORS_PERIOD    (0.001)
  #define AHRS_PERIOD       (0.004)

  void step_handler(uint8_t timerID)
  {
    %<LibCallModelStep(0)>\
  }

  void sensors_handler(uint8_t timerID)
  {
    Navdata::update () ;
    Navdata::IMU::update () ;
  }

  void actuators_handler(uint8_t timerID)
  {
    Actuators::commit();
  }

  void ahrs_handler(uint8_t timerID)
  {
      static int compteur = 0;
      
      if(compteur == 0){
        Navdata::AHRS::setSamplePeriod(4000) ;
        Navdata::AHRS::setKp(5.0, 10.0, 5.0);
        Navdata::AHRS::setKi(0.01, 0.01, 0.03);
      }
      if(compteur <= 1000){
        compteur++;
      }else{
        Navdata::AHRS::setKp(0.5, 0.25, 0.5);
      }
      Navdata::AHRS::updateWithMag();
  }

  %assign fcnReturns = "int_T"
  %assign fcnName = "main"
  %assign fcnParams = "int_T argc, const char *argv[]"
  %assign fcnCategory = "main"
  %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; ...
    Abstract ""; Category fcnCategory; GeneratedBy "bareboard_srmain.tlc"; ...
    Type "Main"}
  %<SLibDumpFunctionBanner(fcnRec)>
  %undef fcnRec
  %<fcnReturns> %<fcnName>(%<fcnParams>)
  {
    
    /* Unused arguments */
    (void)(argc);
    (void)(argv);

    /*Initialize periodic timer */
    SysTime *systime = SysTime::getSysTime () ;
    
    /*Initialize sensors and actuators */
    
    if (!Actuators::init()) {
		  std::cerr << "Error initializing actuators." << std::endl ;
		  return 1 ;
	  }

    if (!Navdata::init()) {
		  std::cerr << "Error initializing sensors." << std::endl ;
		  return 1 ;
	  }
    
    /* Initialize model */
    %<LibCallModelInitialize()>\

    /* Initialize the timers */
%if CompiledModel.StopTime != rtInf
    tid_t main_tid      = systime->registerTimer (STOP_TIME, 0);
%endif
    tid_t step_tid      = systime->registerTimer (STEP_SIZE, step_handler) ;
    tid_t sensors_tid   = systime->registerTimer (SENSORS_PERIOD, sensors_handler);
    tid_t actuators_tid = systime->registerTimer (ACTUATORS_PERIOD, actuators_handler) ;

    /* Associate rt_OneStep() with a timer that executes at the base rate of the model */
%if CompiledModel.StopTime != rtInf
    while (!systime->checkAndAckTimer(main_tid))
%else
    while (1)
%endif    
    {
      usleep(100);
    }

    %<LibCallModelTerminate()>\
    return 0;
  }
  %closefile tmpBuf
  
  %<SLibCacheCodeToFile("mainSrc_fcn_defn", tmpBuf)>
  
%endfunction
