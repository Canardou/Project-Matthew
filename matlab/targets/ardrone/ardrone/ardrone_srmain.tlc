%% ==============================================================================
%% Copyright 1994-2012 The MathWorks, Inc.
%%
%selectfile NULL_FILE

%function FcnSingleTaskingMain() void
  
  %if GenerateSampleERTMain
    %assign ::CompiledModel.GenerateSampleERTMain = TLC_FALSE
    %warning Overriding example ert_main.c!
  %endif

  %openfile tmpBuf

  %<SLibDeclareFcnProtoCtlVariables()>\
  
  %<LibWriteModelData()>\
  %closefile tmpBuf
  
  %<SLibCacheCodeToFile("mainSrc_data_defn", tmpBuf)>
  
  %openfile tmpBuf
  #include "%<LibGetMdlPubHdrBaseName()>.h"
  #include <paparazzi/sys_time.h>   // Timers PAPARAZZI
  #include <paparazzi/Navdata.h>    // Données capteurs PAPARAZZI
  #include <paparazzi/Actuators.h>  // LEDS Moteurs PAPARAZZI
  #include <sys/time.h>
  #include <stdio.h>
  %closefile tmpBuf
 
  %<SLibCacheCodeToFile("mainSrc_incl", tmpBuf)>
  
  %openfile tmpBuf
  void __cxa_pure_virtual(void){}
  #define STEP_SIZE (%<CompiledModel.FundamentalStepSize>)
  #define STOP_TIME (%<CompiledModel.StopTime>)
  #define ACTUATORS_PERIOD  0.01
  #define SENSORS_PERIOD    0.001

  tid_t step_tid;
  tid_t main_tid;
  tid_t sensors_tid;
  tid_t actuators_tid;


  unsigned long getTimePeriod ()
  {
    static double last = 0.0 ;
    double current = 0.0 ;
    struct timeval tim ;
    unsigned long diff ;
    gettimeofday(&tim, NULL) ;
    current = ((double)tim.tv_sec) * 10e6 + (double)tim.tv_usec ;
    diff = current - last ;
    last = current ;
    return diff ;
  }

  %assign fcnReturns = "int_T"
  %assign fcnName = "main"
  %assign fcnParams = "int_T argc, const char *argv[]"
  %assign fcnCategory = "main"
  %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; ...
    Abstract ""; Category fcnCategory; GeneratedBy "bareboard_srmain.tlc"; ...
    Type "Main"}
  %<SLibDumpFunctionBanner(fcnRec)>
  %undef fcnRec
  %<fcnReturns> %<fcnName>(%<fcnParams>)
  {
    
    /* Unused arguments */
    (void)(argc);
    (void)(argv);

    /*Initialize periodic timer */
    step_tid      = sys_time_register_timer(STEP_SIZE, NULL);
    main_tid      = sys_time_register_timer(STOP_TIME, NULL);
    sensors_tid   = sys_time_register_timer(SENSORS_PERIOD, NULL);
    actuators_tid = sys_time_register_timer(ACTUATORS_PERIOD, NULL);
    
    /*Initialize sensors and actuators */
    if (!Actuators::init()) {
		std::cerr << "Error initializing actuators." << std::endl ;
		return 1 ;
	}
    if (!Navdata::init()) {
		std::cerr << "Error initializing sensors." << std::endl ;
		return 1 ;
	}
    
    /* Initialize model */
    %<LibCallModelInitialize()>\

    /* Associate rt_OneStep() with a timer that executes at the base rate of the model */
    while (!sys_time_check_and_ack_timer(main_tid))
    {
        if(sys_time_check_and_ack_timer(sensors_tid)){
            Navdata::update () ;
            Navdata::IMU::update () ;
        }
        if(sys_time_check_and_ack_timer(step_tid)){
            printf("PERIOD=%lu\n", getTimePeriod());
            %<LibCallModelStep(0)>\
        }
        if(sys_time_check_and_ack_timer(actuators_tid)){
            Actuators::commit();
        }
    }

    %<LibCallModelTerminate()>\
    return 0;
  }
  %closefile tmpBuf
  
  %<SLibCacheCodeToFile("mainSrc_fcn_defn", tmpBuf)>
  
%endfunction
