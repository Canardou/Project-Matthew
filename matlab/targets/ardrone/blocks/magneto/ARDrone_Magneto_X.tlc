%% File : ARDrone_Magneto_X.tlc
%%
%% Description: 
%%   Simulink Coder TLC Code Generation file for ARDrone_Magneto_X
%%
%% Simulink version      : 8.2 (R2013b) 08-Aug-2013
%% TLC file generated on : 20-Jan-2014 17:50:29

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'ARDrone_Magneto_X';
     def.OutputFcnSpec = 'single y1 = Magneto_Get_X()';
     def.StartFcnSpec = 'Magneto_Initialization()';
     def.HeaderFiles = {'magneto.h'};
     def.SourceFiles = {'magneto.cpp'};
     def.IncPaths = {'.'};
     def.Options.language = 'C++';
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
 %/

%implements ARDrone_Magneto_X "C"

%% Function: FcnGenerateUniqueFileName ====================================
%%
%function FcnGenerateUniqueFileName(filename, type) void
  %%
  %assign isReserved = TLC_FALSE
  %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
    %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
    %if (thisFile.Name==filename) && (thisFile.Type==type)
      %assign isReserved = TLC_TRUE
      %break
    %endif
  %endforeach
  %if (isReserved==TLC_TRUE)
    %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
  %endif
  %return filename
  %%
%endfunction

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
  %%
  %% The Target Language must be C++
  %if ::GenCPP==0 && !IsModelReferenceSimTarget()
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C++ Target Language")>
  %endif

  %if IsModelReferenceSimTarget()

    %assign hFileName = FcnGenerateUniqueFileName("ARDrone_Magneto_X_wrapper", "header")
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #include "tmwtypes.h"

    extern void ARDrone_Magneto_X_wrapper_start(void);

    extern void ARDrone_Magneto_X_wrapper_output( real32_T *y1);

    #endif
    %closefile hFile

    %assign cFileName = FcnGenerateUniqueFileName("ARDrone_Magneto_X_wrapper", "source")
    %openfile cFile = "%<cFileName>.cpp"
    %selectfile cFile
    #include <string.h>
    #include "tmwtypes.h"
    #include "magneto.h"

    extern "C" {
    void ARDrone_Magneto_X_wrapper_start(void) {


      Magneto_Initialization();

    }
    } 

    extern "C" {
    void ARDrone_Magneto_X_wrapper_output( real32_T *y1) {


      *(real32_T *) y1 = Magneto_Get_X();

    }
    } 

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>
    %if IsModelReferenceSimTarget()
        %<SLibAddToStaticSources("%<cFileName>.cpp")>
    %else
        %<LibAddToModelSources("%<cFileName>")>
    %endif

  %else

    %<LibAddToCommonIncludes("magneto.h")>

  %endif

    %<SLibAddToStaticSources("magneto.cpp")>

  %%
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %if IsModelReferenceSimTarget()
  %else
    %<LibBlockSetIsExpressionCompliant(block)>
  %endif
  %%
%endfunction

%% Function: Start ========================================================
%%
%function Start(block, system) Output
  %%
  %if IsModelReferenceSimTarget()
    %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
    ARDrone_Magneto_X_wrapper_start();
  %else 
    %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
    Magneto_Initialization();
  %endif 
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
  %%
  %if IsModelReferenceSimTarget()
    %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
    %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
    ARDrone_Magneto_X_wrapper_output( %<y1_ptr>);
  %else 
    %if !LibBlockOutputSignalIsExpr(0)
      %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
      %%
      %<y1_val> = Magneto_Get_X();
    %endif 
  %endif 
  %%
%endfunction

%% Function: BlockOutputSignal ============================================
%%
%function BlockOutputSignal(block,system,portIdx,ucv,lcv,idx,retType) void
  %%
  %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
  %%
  %switch retType
    %case "Signal"
      %if portIdx == 0
        %return "Magneto_Get_X()"
      %else
        %assign errTxt = "Block output port index not supported: %<portIdx>"
        %<LibBlockReportError(block,errTxt)>
      %endif
    %default
      %assign errTxt = "Unsupported return type: %<retType>"
      %<LibBlockReportError(block,errTxt)>
  %endswitch
  %%
%endfunction

%% [EOF]
